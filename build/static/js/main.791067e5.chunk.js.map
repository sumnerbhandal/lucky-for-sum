{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["User","useState","homePage","setHomepage","useEffect","fetch","then","response","json","data","console","log","className","map","listItem","title","src","hero","formats","small","url","description","price","App","to","path","exact","component","Home","About","Contact","render","history","useHistory","onClick","push","name","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mQA4BA,SAASA,IAAQ,IAAD,EACkBC,mBAAS,MAD3B,mBACPC,EADO,KACGC,EADH,KAGdC,qBAAU,WACRC,MAAM,mCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACNN,EAAYM,QAEX,IAYH,OAFAC,QAAQC,IAAIT,GAGV,yBAAKU,UAAU,gBAEXV,EAA0BA,EAASW,KAAI,SAAAC,GAAQ,OAC/C,yBAAKF,UAAU,QACb,4BACCE,EAASC,OAEZ,yBAAKC,IAAG,oCAA+BF,EAASG,KAAKC,QAAQC,MAAMC,OACnE,2BACGN,EAASO,aAEZ,2BACGP,EAASQ,WAVD,cAmBJ,SAASC,IAEtB,OACC,kBAAC,IAAD,KACC,8BACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAE,iBAPP,aAOD,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,YAAT,cAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,eAAgBE,UAAWE,IACvC,kBAAC,IAAD,CAAOJ,KAAK,WAAYE,UAAWG,IAEnC,kBAAC,IAAD,CAAOC,OAAQ,kBAAM,yDAQ3B,SAASH,IACP,OACA,kBAAC,WAAD,KACE,kBAAC5B,EAAD,OAKJ,IAAM8B,EAAU,WACd,IAAME,EAAUC,cAChB,OACE,kBAAC,WAAD,KACE,uCACA,4BAAQC,QAAS,kBAAMF,EAAQG,KAAK,OAApC,gBAKEN,EAAQ,SAAC,GAAD,IAAiBO,EAAjB,EAAEC,MAAOC,OAAQF,KAAjB,OAEZ,kBAAC,WAAD,KAEE,qCAAWA,KC1GGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAACrB,EAAD,OAEFsB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.791067e5.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport \"./index.css\"\n\nimport { BrowserRouter as Router, Route, Link, Switch, useHistory } from \"react-router-dom\";\n\n\nconst useFetch = url => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function fetchData() {\n    const response = await fetch(url);\n    const json = await response.json();\n    setData(json);\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, []);\n\n  return {loading,data};\n};\n\n// .map((highlight) =>\n//           <div key={highlight.id} className=\"container-fluid p-0\"></div>\n\n\nfunction User() {\n  const [homePage, setHomepage] = useState(null);\n  \n  useEffect(() => {\n    fetch('http://178.128.167.228/products')\n    .then(response => response.json())\n    .then(data => {\n    setHomepage(data);\n    } );\n  }, []); // <-- Have to pass in [] here!\n\n  const listings = [];\n\n  // { !homePage ? 'Loading...' : homePage.map(listItem => (\n  //   <p className={`header2 pb-3`}>\n  //     {listItem}\n  //   </p>\n  // ))}\n\n  console.log(homePage)\n  \n  return (\n    <div className=\"product-list\">\n\n      {!homePage ? 'Loading...' : homePage.map(listItem => (\n        <div className=\"card\">\n          <h2> \n          {listItem.title}\n        </h2>\n        <img src={`http://cdn.luckyforsum.com${listItem.hero.formats.small.url}`} />\n        <p> \n          {listItem.description}\n        </p>\n        <p> \n          {listItem.price}\n        </p>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n\nexport default function App() {\n  const name = 'John Doe';\n  return (\n   <Router>\n    <main>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to={`/about/${name}`}>About</Link></li>\n          <li><Link to=\"/contact\">Contact</Link></li>\n        </ul>\n      </nav>\n    <Switch>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/about/:name\"  component={About} />\n      <Route path=\"/contact\"  component={Contact} />\n      {/* <Route path=\"/projects/:id-:title\" render={({match}) => <Project match={match} />} /> */}\n      <Route render={() => <h1>404: page not found</h1>} />\n\n    </Switch>\n    </main>\n</Router>\n  );\n}\n\nfunction Home() {\n  return (\n  <Fragment>\n    <User />\n  </Fragment>\n  )\n};\n\nconst Contact = () => {\n  const history = useHistory();\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <button onClick={() => history.push('/') } >Go to home</button>\n    </Fragment>\n  )\n};\n\n  const About = ({match:{params:{name}}}) => (\n    // props.match.params.name\n    <Fragment>\n      {/* { name !== 'John Doe' ? <Redirect to=\"/\" /> : null } */}\n      <h1>About {name}</h1>\n    </Fragment>\n  );\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}